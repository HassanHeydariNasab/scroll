{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nexport var songsApi = createApi({\n  reducerPath: \"songsApi\",\n  baseQuery: fetchBaseQuery(),\n  endpoints: function endpoints(builder) {\n    return {\n      getSongs: builder.query({\n        queryFn: function queryFn(_ref) {\n          var offset = _ref.offset,\n              limit = _ref.limit;\n          var list = [];\n\n          for (var i = offset; i < offset; i++) {\n            list.push({\n              id: i.toString(),\n              name: \"Song \".concat(i)\n            });\n          }\n\n          return new Promise(function (resolve) {\n            setTimeout(function () {\n              resolve({\n                data: {\n                  total: 100,\n                  list: list\n                }\n              });\n            }, 1000);\n          });\n        }\n      })\n    };\n  }\n});\nvar useGetSongsQuery = songsApi.useGetSongsQuery;\nexport { useGetSongsQuery };","map":{"version":3,"sources":["/home/hsn6/Desktop/scroll/src/songs.api.ts"],"names":["createApi","fetchBaseQuery","songsApi","reducerPath","baseQuery","endpoints","builder","getSongs","query","queryFn","offset","limit","list","i","push","id","toString","name","Promise","resolve","setTimeout","data","total","useGetSongsQuery"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,cAApB,QAA0C,8BAA1C;AAYA,OAAO,IAAMC,QAAQ,GAAGF,SAAS,CAAC;AAChCG,EAAAA,WAAW,EAAE,UADmB;AAEhCC,EAAAA,SAAS,EAAEH,cAAc,EAFO;AAGhCI,EAAAA,SAAS,EAAE,mBAACC,OAAD;AAAA,WAAc;AACvBC,MAAAA,QAAQ,EAAED,OAAO,CAACE,KAAR,CAA+D;AACvEC,QAAAA,OAAO,EAAE,uBAAuB;AAAA,cAApBC,MAAoB,QAApBA,MAAoB;AAAA,cAAZC,KAAY,QAAZA,KAAY;AAC9B,cAAIC,IAAY,GAAG,EAAnB;;AACA,eAAK,IAAIC,CAAC,GAAGH,MAAb,EAAqBG,CAAC,GAAGH,MAAzB,EAAiCG,CAAC,EAAlC,EAAsC;AACpCD,YAAAA,IAAI,CAACE,IAAL,CAAU;AAAEC,cAAAA,EAAE,EAAEF,CAAC,CAACG,QAAF,EAAN;AAAoBC,cAAAA,IAAI,iBAAUJ,CAAV;AAAxB,aAAV;AACD;;AACD,iBAAO,IAAIK,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BC,YAAAA,UAAU,CAAC,YAAM;AACfD,cAAAA,OAAO,CAAC;AACNE,gBAAAA,IAAI,EAAE;AACJC,kBAAAA,KAAK,EAAE,GADH;AAEJV,kBAAAA,IAAI,EAAJA;AAFI;AADA,eAAD,CAAP;AAMD,aAPS,EAOP,IAPO,CAAV;AAQD,WATM,CAAP;AAUD;AAhBsE,OAA/D;AADa,KAAd;AAAA;AAHqB,CAAD,CAA1B;AAyBA,IAAQW,gBAAR,GAA6BrB,QAA7B,CAAQqB,gBAAR","sourcesContent":["import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\ninterface Result<T> {\n  total: number;\n  list: T[];\n}\n\nexport interface Song {\n  id: string;\n  name: string;\n}\n\nexport const songsApi = createApi({\n  reducerPath: \"songsApi\",\n  baseQuery: fetchBaseQuery(),\n  endpoints: (builder) => ({\n    getSongs: builder.query<Result<Song>, { offset: number; limit: number }>({\n      queryFn: ({ offset, limit }) => {\n        let list: Song[] = [];\n        for (let i = offset; i < offset; i++) {\n          list.push({ id: i.toString(), name: `Song ${i}` });\n        }\n        return new Promise((resolve) => {\n          setTimeout(() => {\n            resolve({\n              data: {\n                total: 100,\n                list\n              } as Result<Song>\n            });\n          }, 1000);\n        });\n      }\n    })\n  })\n});\n\nexport const { useGetSongsQuery } = songsApi;\n"]},"metadata":{},"sourceType":"module"}