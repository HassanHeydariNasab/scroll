{"ast":null,"code":"import { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\n\nvar mockedBaseQuery = function mockedBaseQuery(_ref, _ref2, extraOptions) {\n  var url = _ref.url,\n      method = _ref.method,\n      data = _ref.data;\n  var signal = _ref2.signal,\n      dispatch = _ref2.dispatch,\n      getState = _ref2.getState;\n  console.log({\n    url: url,\n    method: method,\n    data: data\n  });\n  if (!url) return Promise.resolve({\n    data: null\n  });\n  var matched = url.match(/\\/v1\\/songs\\?offset=(\\d*)&limit=(\\d*)/);\n  var offset = matched;\n  var list = [];\n\n  for (var i = +offset; i < +offset + limit; i++) {\n    list.push({\n      id: i.toString(),\n      name: \"Song \".concat(i)\n    });\n  }\n\n  console.log({\n    list: list\n  });\n  return Promise.resolve({\n    data: {\n      total: 100,\n      list: list\n    }\n  });\n};\n\nexport var songsApi = createApi({\n  reducerPath: \"songsApi\",\n  baseQuery: 1 === 1 ? mockedBaseQuery : fetchBaseQuery({\n    baseUrl: \"http://avagap.test/api\"\n  }),\n  endpoints: function endpoints(builder) {\n    return {\n      getSongs: builder.query({\n        query: function query(_ref3) {\n          var offset = _ref3.offset,\n              limit = _ref3.limit;\n          return \"/v1/songs?offset=\".concat(offset, \"&limit=\").concat(limit);\n        }\n        /*\n        query: ({ offset, limit }) => ({\n          url: `/v1/Artist/5e5023646582e1286/tracks?maxSize=${limit}&offset=${offset}`,\n          headers: [[\"X-Api-Key\", \"4872bafc54269b2a7133705ab32c7e69\"]]\n        })\n        */\n\n      })\n    };\n  }\n});\nvar useGetSongsQuery = songsApi.useGetSongsQuery;\nexport { useGetSongsQuery };","map":{"version":3,"sources":["/home/hsn6/Desktop/scroll/src/songs.api.ts"],"names":["createApi","fetchBaseQuery","mockedBaseQuery","extraOptions","url","method","data","signal","dispatch","getState","console","log","Promise","resolve","matched","match","offset","list","i","limit","push","id","toString","name","total","songsApi","reducerPath","baseQuery","baseUrl","endpoints","builder","getSongs","query","useGetSongsQuery"],"mappings":"AAAA,SAEEA,SAFF,EAGEC,cAHF,QAIO,8BAJP;;AAgBA,IAAMC,eAA4B,GAAG,SAA/BA,eAA+B,cAGnCC,YAHmC,EAIhC;AAAA,MAHDC,GAGC,QAHDA,GAGC;AAAA,MAHIC,MAGJ,QAHIA,MAGJ;AAAA,MAHYC,IAGZ,QAHYA,IAGZ;AAAA,MAFDC,MAEC,SAFDA,MAEC;AAAA,MAFOC,QAEP,SAFOA,QAEP;AAAA,MAFiBC,QAEjB,SAFiBA,QAEjB;AACHC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEP,IAAAA,GAAG,EAAHA,GAAF;AAAOC,IAAAA,MAAM,EAANA,MAAP;AAAeC,IAAAA,IAAI,EAAJA;AAAf,GAAZ;AACA,MAAI,CAACF,GAAL,EAAU,OAAOQ,OAAO,CAACC,OAAR,CAAgB;AAAEP,IAAAA,IAAI,EAAE;AAAR,GAAhB,CAAP;AACV,MAAIQ,OAAO,GAAGV,GAAG,CAACW,KAAJ,CAAU,uCAAV,CAAd;AACA,MAAIC,MAAM,GAAGF,OAAb;AACA,MAAIG,IAAY,GAAG,EAAnB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAACF,MAAd,EAAsBE,CAAC,GAAG,CAACF,MAAD,GAAUG,KAApC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9CD,IAAAA,IAAI,CAACG,IAAL,CAAU;AAAEC,MAAAA,EAAE,EAAEH,CAAC,CAACI,QAAF,EAAN;AAAoBC,MAAAA,IAAI,iBAAUL,CAAV;AAAxB,KAAV;AACD;;AACDR,EAAAA,OAAO,CAACC,GAAR,CAAY;AAAEM,IAAAA,IAAI,EAAJA;AAAF,GAAZ;AACA,SAAOL,OAAO,CAACC,OAAR,CAAgB;AACrBP,IAAAA,IAAI,EAAE;AACJkB,MAAAA,KAAK,EAAE,GADH;AAEJP,MAAAA,IAAI,EAAJA;AAFI;AADe,GAAhB,CAAP;AAMD,CApBD;;AAsBA,OAAO,IAAMQ,QAAQ,GAAGzB,SAAS,CAAC;AAChC0B,EAAAA,WAAW,EAAE,UADmB;AAEhCC,EAAAA,SAAS,EACP,MAAM,CAAN,GACIzB,eADJ,GAEID,cAAc,CAAC;AAAE2B,IAAAA,OAAO,EAAE;AAAX,GAAD,CALY;AAMhCC,EAAAA,SAAS,EAAE,mBAACC,OAAD;AAAA,WAAc;AACvBC,MAAAA,QAAQ,EAAED,OAAO,CAACE,KAAR,CAA+D;AACvEA,QAAAA,KAAK,EAAE;AAAA,cAAGhB,MAAH,SAAGA,MAAH;AAAA,cAAWG,KAAX,SAAWA,KAAX;AAAA,4CAA2CH,MAA3C,oBAA2DG,KAA3D;AAAA;AACP;AACN;AACA;AACA;AACA;AACA;;AAP6E,OAA/D;AADa,KAAd;AAAA;AANqB,CAAD,CAA1B;AAmBA,IAAQc,gBAAR,GAA6BR,QAA7B,CAAQQ,gBAAR","sourcesContent":["import {\n  BaseQueryFn,\n  createApi,\n  fetchBaseQuery\n} from \"@reduxjs/toolkit/query/react\";\n\ninterface Result<T> {\n  total: number;\n  list: T[];\n}\n\nexport interface Song {\n  id: string;\n  name: string;\n}\n\nconst mockedBaseQuery: BaseQueryFn = (\n  { url, method, data },\n  { signal, dispatch, getState },\n  extraOptions\n) => {\n  console.log({ url, method, data });\n  if (!url) return Promise.resolve({ data: null });\n  let matched = url.match(/\\/v1\\/songs\\?offset=(\\d*)&limit=(\\d*)/);\n  let offset = matched;\n  let list: Song[] = [];\n  for (let i = +offset; i < +offset + limit; i++) {\n    list.push({ id: i.toString(), name: `Song ${i}` });\n  }\n  console.log({ list });\n  return Promise.resolve({\n    data: {\n      total: 100,\n      list\n    } as Result<Song>\n  });\n};\n\nexport const songsApi = createApi({\n  reducerPath: \"songsApi\",\n  baseQuery:\n    1 === 1\n      ? mockedBaseQuery\n      : fetchBaseQuery({ baseUrl: \"http://avagap.test/api\" }),\n  endpoints: (builder) => ({\n    getSongs: builder.query<Result<Song>, { offset: number; limit: number }>({\n      query: ({ offset, limit }) => `/v1/songs?offset=${offset}&limit=${limit}`\n      /*\n      query: ({ offset, limit }) => ({\n        url: `/v1/Artist/5e5023646582e1286/tracks?maxSize=${limit}&offset=${offset}`,\n        headers: [[\"X-Api-Key\", \"4872bafc54269b2a7133705ab32c7e69\"]]\n      })\n      */\n    })\n  })\n});\n\nexport const { useGetSongsQuery } = songsApi;\n"]},"metadata":{},"sourceType":"module"}